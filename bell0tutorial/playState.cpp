// INCLUDES /////////////////////////////////////////////////////////////////////////////

// class header
#include "playState.h"

// bell0bytes core
#include "app.h"
#include "depesche.h"

// bell0bytes input
#include "gameCommands.h"
#include "inputComponent.h"
#include "inputHandler.h"

// bell0bytes graphics
#include "graphicsComponent.h"
#include "graphicsComponent2D.h"
#include "d2d.h"
#include "graphicsComponentWrite.h"
#include "sprites.h"


// bell0bytes mathematics
#include "geometry.h"
#include "trigonometry.h"


// CLASS METHODS ////////////////////////////////////////////////////////////////////////
namespace game
{
	/////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////// Constructor and Destructor ////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////
	PlayState::PlayState(core::DirectXApp& app, const std::wstring& name) : GameState(app, name)
	{ }
	PlayState::~PlayState()
	{ }
	PlayState& PlayState::createInstance(core::DirectXApp& app, const std::wstring& stateName)
	{
		static PlayState instance(app, stateName);
		return instance;
	}

	/////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////// Initialization //////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////
	util::Expected<void> PlayState::initialize()
	{
		// catch errors
		util::Expected<void> result;
		
		// allow only keyboard input
		dxApp.getInputComponent().getInputHandler().activeKeyboard = true;
		dxApp.getInputComponent().getInputHandler().activeMouse = true;

		// notify the main application class that the game is running
		isPaused = false;

		firstCreation = false;
		
		// return success
		return { };
	}

	/////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////  Pause and Resume ///////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////
	util::Expected<void> PlayState::pause()
	{
		isPaused = true; 
		return { };
	}
	
	util::Expected<void> PlayState::resume()
	{
		isPaused = false;
		return { };
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////// User Input //////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////
	util::Expected<void> PlayState::handleInput(std::unordered_map<input::GameCommands, input::GameCommand&>& activeKeyMap)
	{
		// act on user input
		for (auto x : activeKeyMap)
		{
			switch (x.first)
			{

			case input::GameCommands::Back:
				dxApp.quitGame();
				break;

			default:
				break;
			}
		}
		return { };	
	}

	util::Expected<void> PlayState::onMessage(const core::Depesche& depesche)
	{
		if (depesche.type == core::DepescheTypes::ActiveKeyMap)
		{
			input::InputHandler* ih = (input::InputHandler*)depesche.sender;

			if (!isPaused)
				if (!ih->isListening())
					return handleInput(ih->activeKeyMap);
		}
		
		// return success
		return { };
	}

	/////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////// Update /////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////
	util::Expected<void> PlayState::update(const double /*deltaTime*/)
	{
		if (isPaused)
			return { };

		// return success
		return { };
	}

	/////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////// Render //////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////
	util::Expected<void> PlayState::render(const double /*farSeer*/)
	{
		// print FPS information
		dxApp.getGraphicsComponent().getWriteComponent().printFPS();

		// return success
		return { };
	}

	/////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////// Shutdown ////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////
	util::Expected<void> PlayState::shutdown()
	{
		isPaused = true;

		// return success
		return { };
	}
}